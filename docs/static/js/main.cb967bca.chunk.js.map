{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","newPet","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","gif","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","img","GifExpertApp","categories","categorie","ReactDOM","render","document","getElementById"],"mappings":"mMA2CeA,EAvCK,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAELC,mBAAS,IAFJ,mBAElCC,EAFkC,KAEtBC,EAFsB,KAuBzC,OACI,sBAAMC,SAbW,SAAEC,GAEnBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAM,OAAKP,GAAL,mBAAoBO,OACzCN,EAAc,MAOlB,SACI,uBACAO,KAAK,OACLC,MAAUT,EACVU,SAvBkB,SAAEP,GAExBF,EAAeE,EAAEQ,OAAOF,a,+BCTnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DAGJ,mCACTC,EAJa,iDAIoCC,UAAUH,GAJ9C,6BAGJ,oCAHI,SAKII,MAAOF,GALX,cAKbG,EALa,gBAMEA,EAASC,OANX,uBAMZC,EANY,EAMZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZvB,kBAgBZM,GAhBY,4CAAH,sDCAPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAKrC,OACI,sBAAKc,UAAU,8CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCNHO,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAAgB,ECDf,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAiBxC,OATAC,qBAAW,WACPxB,EAASC,GAAWwB,MAAM,SAAAC,GAClBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAAEpB,IAEEqB,EDV0BK,CAAc1B,GAAlCa,EAN0B,EAM/BN,KAAaa,EANkB,EAMlBA,QAErB,OACI,qCACA,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAClDoB,GAAW,mBAAGJ,UAAU,mCAAb,0BACb,qBAAKA,UAAU,YAAf,SAIQH,EAAOJ,KAAK,SAAAkB,GACR,OAAO,cAAC,EAAD,eAEFA,GADGA,EAAIhB,aEajBiB,EA7BM,WAGjB,IAHuB,EAIa1C,mBADd,CAAC,iBAHA,mBAIhB2C,EAJgB,KAIJ5C,EAJI,KAUvB,OACI,qCACA,gDACA,cAAC,EAAD,CAAaA,cAAmBA,IAChC,uBACA,6BAEQ4C,EAAWpB,KAAK,SAAAqB,GACZ,OAAO,cAAC,EAAD,CAEP9B,SAAa8B,GADPA,Y,MCnB1BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.cb967bca.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nconst AddCategory = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    // Update text\r\n    const handleInputChange = ( e ) => {\r\n\r\n        setInputValue( e.target.value );\r\n    };\r\n\r\n    // Form submit -> preventDefault.\r\n    const handleSubmit = ( e ) => {\r\n        // This method don't  allow refresh the site.\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2){\r\n            setCategories( newPet => [inputValue, ...newPet]);\r\n            setInputValue('');\r\n        }\r\n        \r\n        \r\n    };\r\n\r\n    return (\r\n        <form onSubmit= { handleSubmit }>\r\n            <input \r\n            type=\"text\" \r\n            value = { inputValue }\r\n            onChange = { handleInputChange }\r\n            /> \r\n        </form>\r\n\r\n    )\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","\r\n// 12. create a function that allows obtain informaciÃ³n from API.\r\nexport const getGifs = async( category ) => {\r\n\r\n    // Request http\r\n    const apiKey = 'GUvPCLeRnIBFQx2DwolwDnJVjJIeF55W';\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=${apiKey}`;\r\n    const response = await fetch( url );\r\n    const {data} = await response.json();\r\n    \r\n    const gifs = data.map( gif => {\r\n        return {\r\n            id: gif.id,\r\n            title: gif.title,\r\n            url: gif.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n    \r\n};","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n    // console.log(id, title, url);\r\n\r\n    // 10. To create <div></div> tag with image and title of request.\r\n    // 11. To return this div and GifGrid use it.\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInDown \">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n    // 7. To use category prop.\r\n    // 8. To use a custom hook called useFetchGifs and pass category prop.\r\n    // 9. To create cards and styling it.\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n        { loading && <p className=\"animate__animated animate__flash\"> Loading... </p> }\r\n        <div className=\"card-grid\">\r\n            {/* This create a orderened list with a map  */}\r\n            {\r\n                // Use destructuring and only obtain id and title\r\n                images.map( img => {\r\n                    return <GifGridItem  \r\n                    key = { img.id }\r\n                    { ...img }\r\n                    />\r\n                })\r\n            }\r\n        </div>\r\n        </>\r\n    )\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    // // Only run a time: useEffect hook.\r\n    useEffect( () => {\r\n        getGifs( category ).then( imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n        })\r\n    }, [ category ]);\r\n\r\n    return state; // {data:[], loading:true}\r\n};","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n// 2. To create GifExpertApp functional component.\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    // 5. To use useState hook to update the category\r\n    let categoriesArray = ['Breaking Bad'];\r\n    const [categories, setCategories] = useState(categoriesArray);\r\n\r\n    // 3. To create <h2>GifExpertApp</h2> tag\r\n    // 4. To create <ol></ol> tag\r\n\r\n    // 6. To create categories.map( and return <GifGrid> </GifGrid> component).\r\n    return (\r\n        <>\r\n        <h2> GifExpertApp </h2>\r\n        <AddCategory setCategories =  { setCategories }/>\r\n        <hr />\r\n        <ol>\r\n            {\r\n                categories.map( categorie => {\r\n                    return <GifGrid \r\n                    key={ categorie }\r\n                    category = { categorie } />\r\n                })\r\n            }\r\n        </ol>\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default GifExpertApp;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n// 1. To import GifExperApp component.\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}